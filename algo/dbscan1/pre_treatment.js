'use strict';

Cotton.Algo.PreTreatment = {};

// PreTreatment is used in the worker, so all data received are serialized.
// That's why, lVisitItem is a list of Object (dictionary). And not a list of
// Cotton.Model.VisitItem.
// TODO(rmoutard) : discuss about the idea of using deserialized function.

Cotton.Algo.PreTreatment.computeClosestGeneratedPage = function(lVisitItems) {
  // For all visitItems find the closest page generated by a search with
  // query keywords. Store this keywords on the object.

  var iSliceTime = Cotton.Config.Parameters.iSliceTime;
  // After this time a page is considered as non-linked with a query search page
  var sNonFound = "http://www.google.fr/";
  var oCurrentSearchPage = {
    'sUrl' : "http://www.google.fr/",
    'iVisitTime' : 0
  };

  for ( var i = lVisitItems.length - 1; i >= 0; i--) {
    // Inverse Loop.
    // This method is working because lVisitItems is sorted by iVisitTime.
    var oUrl = new parseUrl(lVisitItems[i]['sUrl']);
    // TODO(rmoutard) : maybe put all the oUrl.
    lVisitItems[i]['sPathname'] = oUrl.pathname;
    lVisitItems[i]['sHostname'] = oUrl.hostname;
    if (oUrl.pathname === "/search") {
      // We found a page generated by a search with query keywords
      oUrl.generateKeywords();

      lVisitItems[i]['sClosestGeneratedPage'] = lVisitItems[i]['sUrl'];
      lVisitItems[i]['lQueryWords'] = oUrl.keywords;
      oCurrentSearchPage = lVisitItems[i];
    } else {
      if (Math.abs(oCurrentSearchPage['iVisitTime'] - lVisitItems[i]['iVisitTime']) <= iSliceTime) {

        lVisitItems[i]['sClosestGeneratedPage'] = oCurrentSearchPage['sUrl'];
        lVisitItems[i]['lQueryWords'] = oCurrentSearchPage['lQueryWords'];
      } else {

        lVisitItems[i]['sClosestGeneratedPage'] = sNonFound;
        lVisitItems[i]['lQueryWords'] = new Array();
      }
    }
  }

  return lVisitItems;
};

Cotton.Algo.PreTreatment.computeExtractedWordsFromTitle = function(lVisitItems) {
  // Instead of computing every time you compute a distance

  for ( var i = 0; i < lVisitItems.length; i++) {
    lVisitItems[i]['lExtractedWords'] = Cotton.Algo
        .extractWords(lVisitItems[i]['sTitle']);
  }
  return lVisitItems;
};

Cotton.Algo.PreTreatment.suite = function(lVisitItems) {
  lVisitItems = Cotton.Algo.PreTreatment
      .computeClosestGeneratedPage(lVisitItems);
  lVisitItems = Cotton.Algo.PreTreatment
      .computeExtractedWordsFromTitle(lVisitItems);
  return lVisitItems;
};
