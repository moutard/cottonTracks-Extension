// Tools

Cotton.Algo.extractWords = function(sTitle) {
  // We cannot use the \b boundary symbol in the regex because accented
  // characters would not be considered (not art of \w).
  // Include all normal characters, dash, accented characters.
  // TODO(fwouts): Consider other characters such as digits?
  var oRegexp = /[\w\-\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+/g;
  var lMatches = sTitle.match(oRegexp) || [];
  // TODO(fwouts): Be nicer on the words we keep, but still reject useless words
  // such as "-".
  lMatches = _.filter(lMatches, function(sWord) {
    return sWord.length > 2;
  });
  return lMatches;
};

Cotton.Algo.commonWords = function(oHistoryItem1, oHistoryItem2) {
  // Return the number of common words

  var iTitleWordsAmount = 0;
  var lWords1 = Cotton.Algo.extractWords(oHistoryItem1.title);
  var lWords2 = Cotton.Algo.extractWords(oHistoryItem2.title);

  /*var dWords1 = {};
  for ( var iI = 0, iN = lWords1.length; iI < iN; iI++) {
    var sWord = lWords1[iI];
    dWords1[sWord] = true;
  }
  for ( var iI = 0, iN = lWords2.length; iI < iN; iI++) {
    var sWord = lWords2[iI];
    if (dWords1[sWord]) {
      // The word is resent in both.
      iTitleWordsAmount++;
      // Do not count it twice.
      delete dWords1[sWord];
    }
  }*/
  var commonWords = _.intersection(lWords1, lWords2);
  return commonWords.length;
};

Cotton.Algo.distance = function(oHistoryItem1, oHistoryItem2) {
  // compute distance between two historyItems

};

Cotton.Algo.distanceId = function(oHistoryItem1, oHistoryItem2) {
  // compute the Id distance
  return Math.abs(parseInt(oHistoryItem1.id) - parseInt(oHistoryItem2.id));
};

Cotton.Algo.distanceLastVisitTime = function(oHistoryItem1, oHistoryItem2) {
  // compute the last visit distance
  return Math.abs(oHistoryItem1.lastVisitTime - oHistoryItem2.lastVisitTime);
};

// TODO(rmoutard) : Write a better distance, maybe to keep it between [0,1]
// for instance you need to balance common words
Cotton.Algo.distanceComplexe = function(oHistoryItem1, oHistoryItem2) {

  // TODO: (rmoutard) write a class for coefficients
  var coeff = Cotton.Config.Parameters.distanceCoeff;

  // id
  // id close => items close
  // ordre de grandeur = close if 0(1) , far if 0(20).
  var sum = coeff.id
      * Math.abs(parseInt(oHistoryItem1.id) - parseInt(oHistoryItem2.id))
      / 20 ;

  // lastTimeVisit
  // lastTimeVisit close => items close
  // ordre de grandeur = O(100 000)
  // close if 0(100 000) far if 0(600 000)
  sum += coeff.lastVisitTime
      * Math.abs(oHistoryItem1.lastVisitTime - oHistoryItem2.lastVisitTime)
      / 100000 ;

  // Common words
  // number of common words is high => items close
  // ordre de grandeur = O(5)
  // close if 0(1) far if 0.
  sum += coeff.commonWords * 1
      / ((1 + Cotton.Algo.commonWords(oHistoryItem1, oHistoryItem2)) ^ 2);

  // Query keywords
  sum += coeff.queryKeywords * 1
      / ((1 + Cotton.Algo.distanceBetweenGeneratedPages(oHistoryItem1,
          oHistoryItem2)) ^ 2);

  return sum;
};

/*
 * Distance between generated pages
 */

Cotton.Algo.distanceBetweenGeneratedPages = function(oHistoryItem1,
    oHistoryItem2) {

  var keywords1 = oHistoryItem1.queryKeywords;
  var keywords2 = oHistoryItem2.queryKeywords;

  var result = _.intersection(keywords1, keywords2);
  return result.length;
}

/*
 * HistoryItem An object encapsulating one result of a history query.
 * 
 * id ( string ) The unique identifier for the item. url ( optional string ) The
 * URL navigated to by a user. title ( optional string ) The title of the page
 * when it was last loaded. lastVisitTime ( optional number ) When this page was
 * last loaded, represented in milliseconds since the epoch. visitCount (
 * optional integer ) The number of times the user has navigated to this page.
 * typedCount ( optional integer ) The number of times the user has navigated to
 * this page by typing in the address.
 */

/*
 * Url generated by google q=jennifer+aniston& // query
 * pq=tets&pf=p&sclient=psy-ab& //previous query site=webhp&source=hp&pbx=1&
 * oq=jennifer+a& // auto completion
 * aq=0&aqi=g4&aql=&gs_sm=&gs_upl=&bav=on.2,or.r_gc.r_pw.r_cp.,cf.osb&fp=6fc8c6804cede81f&ix=seb&ion=1&biw=1438&bih=727
 */
