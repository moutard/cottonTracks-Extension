'use strict';

// PreTreatment Workspace
Cotton.Algo.PreTreatment = {};

Cotton.Algo.PreTreatment.removeTools = function(lVisitItems) {
  // Remove all the tools as mail.google.com, facebook.com.

  var oToolsContainer = generateTools(); // return a list of Tools
  var lCleanVisitItems = new Array(); // Store the new list without tools

  // TODO(rmoutard) : use _.filter function in underscore library
  while (lVisitItems.length > 0) {
    var oVisitItem = lVisitItems.shift();
    var sHostname = new parseUrl(oVisitItem.url()).hostname;

    // if hostname of the url is a Tool remove it
    if (oToolsContainer.alreadyExist(sHostname) === -1) {
      lCleanVisitItems.push(oVisitItem);
    }
  }
  return lCleanVisitItems;
};

Cotton.Algo.PreTreatment.computeClosestGeneratedPage = function(lVisitItems) {
  // For all historyItems find the closest page generated by a search with
  // query keywords. Store this keywords on the object.

  var iSliceTime = Cotton.Config.Parameters.iSliceTime;
  // After this time a page is considered as non-linked with a query search page
  var sNonFound = "http://www.google.fr/";
  var oCurrentSearchPage = {
    url : "http://www.google.fr/",
    lastVisitTime : 0
  };

  for ( var i = lVisitItems.length - 1; i >= 0; i--) {
    // Inverse Loop.
    // this method is working because lVisitItems is sorted by lastVisitTime

    var oUrl = new parseUrl(lVisitItems[i].url());
    // TODO(rmoutard) : maybe put all the oUrl.
    lVisitItems[i].setPathname(oUrl.pathname);
    lVisitItems[i].setHostname(oUrl.hostname);
    if (oUrl.pathname === "/search") {
      // We found a page generated by a search with query keywords
      oUrl.generateKeywords();

      lVisitItems[i].setClosestGeneratedPage(lVisitItems[i].url());
      lVisitItems[i].setQueryKeywords(oUrl.keywords);
      oCurrentSearchPage = lVisitItems[i];
    } else {
      if (Math.abs(oCurrentSearchPage.lastVisitTime
          - lVisitItems[i].lastVisitTime()) <= iSliceTime) {

        lVisitItems[i].setClosestGeneratedPage(oCurrentSearchPage.url());
        lVisitItems[i].setQueryKeywords(oCurrentSearchPage.queryKeywords());
      } else {

        lVisitItems[i].setClosestGeneratedPage(sNonFound);
        lVisitItems[i].setQueryKeywords(new Array());
      }
    }
  }

  return lVisitItems;
};

Cotton.Algo.PreTreatment.computeExtractedWordsFromTitle = function(lVisitItems) {
  // Instead of computing every time you compute a distance

  for ( var i = 0, oVisitItem; oVisitItem = lVisitItems[i]; i++) {
    oVisitItem.setExtractedWords(Cotton.Algo.extractWords(oVisitItem.title()));
  }
  return lVisitItems;
};

Cotton.Algo.PreTreatment.suite = function(lVisitItems) {
  lVisitItems = Cotton.Algo.PreTreatment.removeTools(lVisitItems);
  lVisitItems = Cotton.Algo.PreTreatment
      .computeClosestGeneratedPage(lVisitItems);
  lVisitItems = Cotton.Algo.PreTreatment
      .computeExtractedWordsFromTitle(lVisitItems);
  return lVisitItems;
};
